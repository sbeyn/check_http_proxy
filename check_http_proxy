#!/usr/bin/env python3
# vi:ts=4:noet
#
# Nagios HTTP proxy test
#
# usage: check_http_proxy --proxy=proxy:port --auth=user:pass --url=url --timeout=10 --warntime=5 --expect=content
#
# Response codes: 0(OK), 1(WARNING), 2(CRITICAL), 3(UNKNOWN)
# Output: one line on stdout
#

import sys
import getopt
import time
import urllib3
import urllib3.exceptions
import socket
import argparse

def test_proxy(args):
    # Set up for request (use cred@proxy form because this bypasses knowing the realm)
    if getattr(args, 'auth'):
        proxy_url = "{}://{}@{}".format(args.scheme, args.auth, args.proxy)
    else:
        proxy_url = "{}://{}".format(args.scheme, args.proxy)

    proxy = urllib3.ProxyManager(proxy_url)

    response = proxy.request("GET", args.url, None, timeout=args.timeout)

    return response

def report_ok(msg):
    print("PROXY OK - {0}".format(msg))
    sys.exit(0)

def report_warning(msg):
    print("PROXY WARNING - {0}".format(msg))
    sys.exit(1)

def report_critical(msg):
    print("PROXY CRITICAL - {0}".format(msg))
    sys.exit(2)

def report_unknown(msg):
    print("PROXY UNKNWON - {0}".format(msg))
    sys.exit(3)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-p', '--proxy', dest='proxy', type=str, required=True, help='Specifies FQDN or IP address of proxy server.')
    parser.add_argument(
        '-a', '--auth', dest='auth', type=str, help='Specifies user and password with format <user:pass>.')
    parser.add_argument(
        '-u', '--url', dest='url', type=str, required=True, help='Specifies URL to test.')
    parser.add_argument(
        '-t', '--timeout', dest='timeout', type=int, default=5, help='Set timetout.')
    parser.add_argument(
        '-w', '--warntime', dest='warntime', type=int, default=3, help='Set warn time.')
    parser.add_argument(
        '-e', '--expect', dest='expect', type=str, help='Specifies Content to check')
    parser.add_argument(
        '-s', '--scheme', dest='scheme', type=str, default='http', help='Proxy scheme http or https')
    args = parser.parse_args()

    start_time = time.time()

    try:
        response = test_proxy(args)

    except urllib3.exceptions.HTTPError as e:
        if hasattr(e,"reason") and isinstance(e.reason, socket.timeout):
            report_critical("Timed out (over {:.2f}s)".format(args.timeout))
        else:
            report_critical("Request failed ({0})".format(e))

    except Exception as e:
        report_unknown("Request failed: ({0})".format(e))

    end_time = time.time()
    duration = end_time - start_time

    # Check content
    if getattr(args, 'expect'):
        if response.data.decode("utf-8").find(str(args.expect)) == -1:
            report_critical("Failed content check ({})".format(str(args.expect)))

    # Check warning time
    if getattr(args, 'warntime'):
        if duration >= args.warntime:
            report_warning("Over warning time ({0:.2f}s >= {1:.2f}s) | time={0:.2f}s".format(duration, args.warntime))

    report_ok("Request return in {0:.2f} seconds | time={0:.2f}s".format(duration))
